### PhotoApp API 테스트

### 1. 회원가입
POST http://localhost:3000/api/auth/signup
Content-Type: application/json

{
  "email": "test@example.com",
  "username": "testuser",
  "password": "password123",
  "bio": "테스트 사용자입니다."
}

### 2. 로그인
POST http://localhost:3000/api/auth/signin
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}

### 3. 이메일 인증 (개발용 - 코드: 123456)
POST http://localhost:3000/api/auth/verify-email
Content-Type: application/json

{
  "email": "test@example.com",
  "code": "123456"
}

### 4. 인증 재발송
POST http://localhost:3000/api/auth/resend-verification
Content-Type: application/json

{
  "email": "test@example.com"
}

### 5. 프로필 조회 (인증 필요)
GET http://localhost:3000/api/auth/profile
Authorization: Bearer YOUR_JWT_TOKEN

### 6. 로그아웃 (인증 필요)
POST http://localhost:3000/api/auth/logout
Authorization: Bearer YOUR_JWT_TOKEN

### 7. 사진 목록 조회
GET http://localhost:3000/api/photos?page=1&limit=10

### 8. 특정 사용자의 사진 조회
GET http://localhost:3000/api/photos?userId=USER_ID&page=1&limit=10

### 9. 사진 상세 조회
GET http://localhost:3000/api/photos/PHOTO_ID

### 10. 사진 업로드 (인증 필요)
POST http://localhost:3000/api/photos
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="description"

테스트 사진입니다.
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="test.jpg"
Content-Type: image/jpeg

< ./test-image.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 11. 사진 수정 (인증 필요)
PUT http://localhost:3000/api/photos/PHOTO_ID
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json

{
  "description": "수정된 사진 설명입니다."
}

### 12. 사진 삭제 (인증 필요)
DELETE http://localhost:3000/api/photos/PHOTO_ID
Authorization: Bearer YOUR_JWT_TOKEN

### 13. 사진 좋아요 (인증 필요)
POST http://localhost:3000/api/photos/PHOTO_ID/like
Authorization: Bearer YOUR_JWT_TOKEN

### 14. 사진 좋아요 취소 (인증 필요)
DELETE http://localhost:3000/api/photos/PHOTO_ID/like
Authorization: Bearer YOUR_JWT_TOKEN

### 15. 댓글 추가 (인증 필요)
POST http://localhost:3000/api/photos/PHOTO_ID/comments
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json

{
  "content": "멋진 사진이네요!"
}

### 16. 댓글 조회
GET http://localhost:3000/api/photos/PHOTO_ID/comments?page=1&limit=10

### 17. 사용자 목록 조회
GET http://localhost:3000/api/users?page=1&limit=10

### 18. 사용자 검색
GET http://localhost:3000/api/users?search=test&page=1&limit=10

### 19. 사용자 상세 조회
GET http://localhost:3000/api/users/USER_ID

### 20. 내 프로필 조회 (인증 필요)
GET http://localhost:3000/api/users/profile/me
Authorization: Bearer YOUR_JWT_TOKEN

### 21. 프로필 수정 (인증 필요)
PUT http://localhost:3000/api/users/profile
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="username"

newusername
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="bio"

새로운 자기소개입니다.
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="profile_image"; filename="profile.jpg"
Content-Type: image/jpeg

< ./profile-image.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 22. 사용자별 사진 조회 (인증 필요)
GET http://localhost:3000/api/users/USER_ID/photos?page=1&limit=10
Authorization: Bearer YOUR_JWT_TOKEN

### 23. 사용자 팔로우 (인증 필요)
POST http://localhost:3000/api/users/USER_ID/follow
Authorization: Bearer YOUR_JWT_TOKEN

### 24. 사용자 언팔로우 (인증 필요)
DELETE http://localhost:3000/api/users/USER_ID/follow
Authorization: Bearer YOUR_JWT_TOKEN

### 25. 팔로워 목록 조회
GET http://localhost:3000/api/users/USER_ID/followers?page=1&limit=10

### 26. 팔로잉 목록 조회
GET http://localhost:3000/api/users/USER_ID/following?page=1&limit=10

### 27. 팔로우 상태 확인 (인증 필요)
GET http://localhost:3000/api/users/USER_ID/is-following
Authorization: Bearer YOUR_JWT_TOKEN
